---
import { Image } from 'astro:assets';
import type { TripParticipant } from '../types/trip';
import { imageConfigs } from '../utils/imageOptimization';

interface Props {
  participants: TripParticipant[];
}

const { participants } = Astro.props;

// Generate initials from name for fallback avatar
const getInitials = (name: string): string => {
  return name
    .split(' ')
    .map(word => word.charAt(0).toUpperCase())
    .slice(0, 2)
    .join('');
};

// Generate a consistent color based on name for fallback avatar
const getAvatarColor = (name: string): string => {
  const colors = [
    '#3498db', '#e74c3c', '#2ecc71', '#f39c12', 
    '#9b59b6', '#1abc9c', '#34495e', '#e67e22'
  ];
  let hash = 0;
  for (let i = 0; i < name.length; i++) {
    hash = name.charCodeAt(i) + ((hash << 5) - hash);
  }
  return colors[Math.abs(hash) % colors.length];
};
---

<section class="trip-participants">
  <h2 class="participants-title">Travel Companions</h2>
  <div class="participants-grid">
    {participants.map((participant) => (
      <div class="person-card">
        <div class="person-avatar">
          {participant.photo ? (
            <Image
              src={participant.photo}
              alt={`Photo of ${participant.name}`}
              class="avatar-image"
              width={80}
              height={80}
              {...imageConfigs.avatar}
            />
          ) : (
            <div 
              class="avatar-fallback"
              style={`background-color: ${getAvatarColor(participant.name)}`}
            >
              {getInitials(participant.name)}
            </div>
          )}
        </div>
        
        <div class="person-info">
          <h3 class="person-name">{participant.name}</h3>
          {participant.role && (
            <p class="person-role">{participant.role}</p>
          )}
        </div>
      </div>
    ))}
  </div>
</section>

<style>
  .trip-participants {
    padding: 3rem 0;
  }

  .participants-title {
    text-align: center;
    font-size: 2rem;
    font-weight: bold;
    margin: 0 0 2rem 0;
    color: #2c3e50;
  }

  .participants-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 2rem;
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .person-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    padding: 1.5rem;
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .person-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
  }

  .person-avatar {
    margin-bottom: 1rem;
    position: relative;
  }

  .avatar-image {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    object-fit: cover;
    border: 3px solid #ecf0f1;
  }

  .avatar-fallback {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
    font-size: 1.5rem;
    border: 3px solid #ecf0f1;
  }

  .person-info {
    width: 100%;
  }

  .person-name {
    font-size: 1.125rem;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
    color: #2c3e50;
    line-height: 1.3;
  }

  .person-role {
    font-size: 0.875rem;
    color: #7f8c8d;
    margin: 0;
    line-height: 1.4;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .trip-participants {
      padding: 2rem 0;
    }

    .participants-title {
      font-size: 1.75rem;
      margin-bottom: 1.5rem;
    }

    .participants-grid {
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 1.5rem;
      padding: 0 1rem;
    }

    .person-card {
      padding: 1.25rem;
    }

    .avatar-image,
    .avatar-fallback {
      width: 60px;
      height: 60px;
    }

    .avatar-fallback {
      font-size: 1.25rem;
    }

    .person-name {
      font-size: 1rem;
    }

    .person-role {
      font-size: 0.8125rem;
    }
  }

  @media (max-width: 480px) {
    .participants-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
      padding: 0 0.5rem;
    }

    .person-card {
      padding: 1rem;
    }

    .avatar-image,
    .avatar-fallback {
      width: 50px;
      height: 50px;
    }

    .avatar-fallback {
      font-size: 1rem;
    }

    .person-name {
      font-size: 0.9375rem;
    }

    .person-role {
      font-size: 0.75rem;
    }
  }

  /* Special layout for single participant */
  .participants-grid:has(.person-card:only-child) {
    justify-content: center;
  }

  .participants-grid:has(.person-card:only-child) .person-card {
    max-width: 300px;
  }

  /* Layout adjustments for 2-3 participants */
  @media (min-width: 769px) {
    .participants-grid:has(.person-card:nth-child(2):last-child) {
      grid-template-columns: repeat(2, 1fr);
      max-width: 600px;
    }

    .participants-grid:has(.person-card:nth-child(3):last-child) {
      grid-template-columns: repeat(3, 1fr);
      max-width: 800px;
    }
  }
</style>