---
export interface Props {
  route: {
    coordinates: [number, number][];
    waypoints: Array<{
      name: string;
      coordinates: [number, number];
    }>;
  };
  title?: string;
  class?: string;
}

const { route, title = "Trip Route", class: className = "" } = Astro.props;
const mapId = `map-${Math.random().toString(36).substr(2, 9)}`;
---

<!-- Include Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" 
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" 
      crossorigin="" />

<div class={`trip-map ${className}`} id="trip-map">
  <div class="map-container" id={mapId} data-route={JSON.stringify(route)}>
    <div class="map-loading">Loading map...</div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    // Dynamically import Leaflet to ensure it loads on the client
    const L = await import('leaflet');
    
    // Find all map containers and initialize them
    const mapContainers = document.querySelectorAll('.map-container[data-route]');
    
    mapContainers.forEach((mapContainer) => {
      const routeData = JSON.parse(mapContainer.getAttribute('data-route') || '{}');
      
      if (routeData.coordinates && routeData.coordinates.length > 0) {
        // Initialize the map
        const map = L.map(mapContainer.id, {
          zoomControl: true,
          scrollWheelZoom: true,
          doubleClickZoom: true,
          touchZoom: true,
          dragging: true
        });

        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: 'Â© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          maxZoom: 18
        }).addTo(map);

        // Create route polyline
        const routeLine = L.polyline(routeData.coordinates, {
          color: '#3b82f6',
          weight: 3,
          opacity: 0.8,
          smoothFactor: 1
        }).addTo(map);

        // Add waypoint markers
        if (routeData.waypoints && routeData.waypoints.length > 0) {
          routeData.waypoints.forEach((waypoint: any, index: number) => {
            const isStart = index === 0;
            const isEnd = index === routeData.waypoints.length - 1;
            
            let markerColor = '#10b981'; // Default green
            if (isStart) markerColor = '#22c55e'; // Start green
            if (isEnd) markerColor = '#ef4444'; // End red

            // Create custom marker icon
            const markerIcon = L.divIcon({
              className: 'custom-marker',
              html: `
                <div style="
                  background-color: ${markerColor};
                  width: 20px;
                  height: 20px;
                  border-radius: 50%;
                  border: 2px solid white;
                  box-shadow: 0 2px 4px rgba(0,0,0,0.3);
                  display: flex;
                  align-items: center;
                  justify-content: center;
                  color: white;
                  font-size: 10px;
                  font-weight: bold;
                ">
                  ${isStart ? 'S' : isEnd ? 'E' : index + 1}
                </div>
              `,
              iconSize: [24, 24],
              iconAnchor: [12, 12]
            });

            const marker = L.marker(waypoint.coordinates, { icon: markerIcon }).addTo(map);
            
            // Add popup with waypoint name
            marker.bindPopup(`
              <div style="font-weight: bold; margin-bottom: 4px;">
                ${waypoint.name}
              </div>
              <div style="font-size: 12px; color: #666;">
                ${isStart ? 'Start' : isEnd ? 'End' : 'Waypoint'}
              </div>
            `);
          });
        }

        // Fit map to show all route points
        if (routeData.coordinates.length > 0) {
          map.fitBounds(routeLine.getBounds(), { padding: [20, 20] });
        }

        // Remove loading message
        const loadingElement = mapContainer.querySelector('.map-loading');
        if (loadingElement) {
          loadingElement.remove();
        }
      }
    });
  });
</script>

<style>
  .trip-map {
    width: 100%;
    margin: 2rem 0;
  }

  .map-container {
    width: 100%;
    /* height: 400px; */
    height: 100%;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    position: relative;
  }

  .map-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: #6b7280;
    font-size: 1rem;
    z-index: 1000;
  }

  /* Leaflet CSS overrides for better styling */
  :global(.leaflet-container) {
    font-family: inherit;
  }

  :global(.leaflet-popup-content-wrapper) {
    border-radius: 6px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  :global(.leaflet-popup-content) {
    margin: 8px 12px;
    line-height: 1.4;
  }

  :global(.leaflet-control-zoom) {
    border-radius: 6px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  :global(.leaflet-control-zoom a) {
    border-radius: 0;
    border: none;
    background-color: white;
    color: #374151;
  }

  :global(.leaflet-control-zoom a:hover) {
    background-color: #f3f4f6;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .map-container {
      height: 300px;
    }
  }

  @media (max-width: 480px) {
    .map-container {
      height: 250px;
    }
  }
</style>