---
export interface Props {
  route: {
    coordinates: [number, number][];
    waypoints: Array<{
      name: string;
      coordinates: [number, number];
    }>;
  };
  title?: string;
  class?: string;
}

const { route, class: className = "" } = Astro.props;
const mapId = `map-${Math.random().toString(36).substring(2, 11)}`;
---

<!-- Include Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" 
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" 
      crossorigin="" />
<!-- Include Leaflet Routing Machine CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.css" />
<!-- Include Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" 
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" 
        crossorigin=""></script>

<div class={`trip-map ${className}`} id="trip-map">
  <div class="map-container" id={mapId} data-route={JSON.stringify(route)}>
    <div class="map-loading">Loading map...</div>
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', async () => {
    // Wait for Leaflet to be available
    if (typeof L === 'undefined') {
      console.error('Leaflet is not loaded');
      return;
    }
    
    // Load Leaflet Routing Machine script
    await new Promise((resolve, reject) => {
      if (L.Routing) {
        resolve(true);
        return;
      }
      
      const script = document.createElement('script');
      script.src = 'https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js';
      script.onload = () => resolve(true);
      script.onerror = () => reject(new Error('Failed to load routing machine'));
      document.head.appendChild(script);
    });
    
    // Find all map containers and initialize them
    const mapContainers = document.querySelectorAll('.map-container[data-route]');
    
    mapContainers.forEach((mapContainer) => {
      const routeData = JSON.parse(mapContainer.getAttribute('data-route') || '{}');
      
      if (routeData.waypoints && routeData.waypoints.length > 1) {
        // Initialize the map
        const map = L.map(mapContainer.id, {
          zoomControl: true,
          scrollWheelZoom: true,
          doubleClickZoom: true,
          touchZoom: true,
          dragging: true
        });

        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          maxZoom: 18
        }).addTo(map);

        // Create waypoints for routing
        const waypoints = routeData.waypoints.map((waypoint) => 
          L.latLng(waypoint.coordinates[0], waypoint.coordinates[1])
        );

        // Create custom waypoint markers
        const createWaypointIcon = (index, total) => {
          const isStart = index === 0;
          const isEnd = index === total - 1;
          
          let markerColor = '#10b981'; // Default green
          if (isStart) markerColor = '#22c55e'; // Start green
          if (isEnd) markerColor = '#ef4444'; // End red

          return L.divIcon({
            className: 'custom-waypoint-marker',
            html: `
              <div style="
                background-color: ${markerColor};
                width: 24px;
                height: 24px;
                border-radius: 50%;
                border: 3px solid white;
                box-shadow: 0 2px 6px rgba(0,0,0,0.3);
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-size: 11px;
                font-weight: bold;
              ">
                ${isStart ? 'S' : isEnd ? 'E' : index + 1}
              </div>
            `,
            iconSize: [30, 30],
            iconAnchor: [15, 15]
          });
        };

        // Create routing control
        const routingControl = L.Routing.control({
          waypoints: waypoints,
          routeWhileDragging: false,
          addWaypoints: false,
          draggableWaypoints: false,
          fitSelectedRoutes: true,
          showAlternatives: false,
          lineOptions: {
            styles: [{
              color: '#3b82f6',
              weight: 4,
              opacity: 0.8
            }]
          },
          createMarker: function(i, waypoint, n) {
            const waypointData = routeData.waypoints[i];
            const marker = L.marker(waypoint.latLng, {
              icon: createWaypointIcon(i, n)
            });
            
            // Add popup with waypoint name
            marker.bindPopup(`
              <div style="font-weight: bold; margin-bottom: 4px;">
                ${waypointData.name}
              </div>
              <div style="font-size: 12px; color: #666;">
                ${i === 0 ? 'Start' : i === n - 1 ? 'End' : 'Waypoint'}
              </div>
            `);
            
            return marker;
          },
          router: L.Routing.osrmv1({
            serviceUrl: 'https://router.project-osrm.org/route/v1',
            profile: 'driving'
          })
        }).addTo(map);

        // Hide the routing instructions panel by default
        const routingContainer = routingControl.getContainer();
        if (routingContainer) {
          routingContainer.style.display = 'none';
        }

        // Add a toggle button for routing instructions
        const toggleButton = L.control({ position: 'topright' });
        toggleButton.onAdd = function() {
          const div = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
          div.innerHTML = `
            <a href="#" title="Toggle Route Instructions" style="
              background: white;
              width: 30px;
              height: 30px;
              display: flex;
              align-items: center;
              justify-content: center;
              text-decoration: none;
              color: #374151;
              font-size: 14px;
              font-weight: bold;
            ">ℹ</a>
          `;
          
          div.onclick = function(e) {
            e.preventDefault();
            if (routingContainer) {
              routingContainer.style.display = 
                routingContainer.style.display === 'none' ? 'block' : 'none';
            }
          };
          
          return div;
        };
        toggleButton.addTo(map);

        // Remove loading message
        const loadingElement = mapContainer.querySelector('.map-loading');
        if (loadingElement) {
          loadingElement.remove();
        }
      } else if (routeData.coordinates && routeData.coordinates.length > 0) {
        // Fallback to simple polyline if no waypoints but coordinates exist
        const map = L.map(mapContainer.id, {
          zoomControl: true,
          scrollWheelZoom: true,
          doubleClickZoom: true,
          touchZoom: true,
          dragging: true
        });

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          maxZoom: 18
        }).addTo(map);

        const routeLine = L.polyline(routeData.coordinates, {
          color: '#3b82f6',
          weight: 3,
          opacity: 0.8,
          smoothFactor: 1
        }).addTo(map);

        map.fitBounds(routeLine.getBounds(), { padding: [20, 20] });

        const loadingElement = mapContainer.querySelector('.map-loading');
        if (loadingElement) {
          loadingElement.remove();
        }
      }
    });
  });
</script>

<style>
  .trip-map {
    width: 100%;
    margin: 2rem 0;
  }

  .map-container {
    width: 100%;
    /* height: 400px; */
    height: 100%;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    position: relative;
  }

  .map-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: #6b7280;
    font-size: 1rem;
    z-index: 1000;
  }

  /* Leaflet CSS overrides for better styling */
  :global(.leaflet-container) {
    font-family: inherit;
  }

  :global(.leaflet-popup-content-wrapper) {
    border-radius: 6px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  :global(.leaflet-popup-content) {
    margin: 8px 12px;
    line-height: 1.4;
  }

  :global(.leaflet-control-zoom) {
    border-radius: 6px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  :global(.leaflet-control-zoom a) {
    border-radius: 0;
    border: none;
    background-color: white;
    color: #374151;
  }

  :global(.leaflet-control-zoom a:hover) {
    background-color: #f3f4f6;
  }

  /* Leaflet Routing Machine styling */
  :global(.leaflet-routing-container) {
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    max-height: 300px;
    overflow-y: auto;
  }

  :global(.leaflet-routing-container h2) {
    font-size: 1rem;
    font-weight: 600;
    margin: 0;
    padding: 12px 16px;
    background: #f8fafc;
    border-bottom: 1px solid #e2e8f0;
  }

  :global(.leaflet-routing-container h3) {
    font-size: 0.875rem;
    font-weight: 500;
    margin: 8px 0 4px 0;
    color: #374151;
  }

  :global(.leaflet-routing-alt) {
    padding: 8px 16px;
    border-bottom: 1px solid #f1f5f9;
  }

  :global(.leaflet-routing-alt:last-child) {
    border-bottom: none;
  }

  :global(.leaflet-routing-alt-minimized) {
    background: #f8fafc;
  }

  :global(.leaflet-routing-instruction) {
    padding: 4px 0;
    font-size: 0.875rem;
    line-height: 1.4;
  }

  :global(.leaflet-routing-instruction-distance) {
    color: #6b7280;
    font-weight: 500;
  }

  :global(.leaflet-routing-instruction-text) {
    color: #374151;
  }

  /* Custom waypoint marker styling */
  :global(.custom-waypoint-marker) {
    background: transparent !important;
    border: none !important;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .map-container {
      height: 300px;
    }
  }

  @media (max-width: 480px) {
    .map-container {
      height: 250px;
    }
  }
</style>