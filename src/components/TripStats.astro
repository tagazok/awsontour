---
import type { TripStats } from '../types/trip';

interface Props {
  stats: TripStats;
}

const { stats } = Astro.props;

// Format numbers with proper units and separators
const formatNumber = (num: number): string => {
  return new Intl.NumberFormat('en-US').format(num);
};

const formatKilometers = (km: number): string => {
  if (km >= 1000) {
    return `${(km / 1000).toFixed(1)}k km`;
  }
  return `${formatNumber(km)} km`;
};

const formatDays = (days: number): string => {
  if (days === 1) return '1 day';
  return `${formatNumber(days)} days`;
};
---

<section class="trip-stats">
  <h2 class="stats-title">Trip Statistics</h2>
  <div class="stats-grid">
    <div class="stat-item">
      <div class="stat-icon">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
          <circle cx="12" cy="10" r="3"></circle>
        </svg>
      </div>
      <div class="stat-content">
        <span class="stat-value">{formatKilometers(stats.kilometers)}</span>
        <span class="stat-label">Distance Traveled</span>
      </div>
    </div>

    <div class="stat-item">
      <div class="stat-icon">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
          <line x1="16" y1="2" x2="16" y2="6"></line>
          <line x1="8" y1="2" x2="8" y2="6"></line>
          <line x1="3" y1="10" x2="21" y2="10"></line>
        </svg>
      </div>
      <div class="stat-content">
        <span class="stat-value">{formatNumber(stats.activities)}</span>
        <span class="stat-label">Activities</span>
      </div>
    </div>

    <div class="stat-item">
      <div class="stat-icon">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
          <circle cx="12" cy="7" r="4"></circle>
        </svg>
      </div>
      <div class="stat-content">
        <span class="stat-value">{formatNumber(stats.peopleMet)}</span>
        <span class="stat-label">People Met</span>
      </div>
    </div>

    <div class="stat-item">
      <div class="stat-icon">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
          <polyline points="9,22 9,12 15,12 15,22"></polyline>
        </svg>
      </div>
      <div class="stat-content">
        <span class="stat-value">{formatNumber(stats.cities)}</span>
        <span class="stat-label">Cities Visited</span>
      </div>
    </div>

    <div class="stat-item">
      <div class="stat-icon">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="10"></circle>
          <polyline points="12,6 12,12 16,14"></polyline>
        </svg>
      </div>
      <div class="stat-content">
        <span class="stat-value">{formatDays(stats.days)}</span>
        <span class="stat-label">Duration</span>
      </div>
    </div>
  </div>
</section>

<style>
  .trip-stats {
    padding: 3rem 0;
    background: #f8f9fa;
  }

  .stats-title {
    text-align: center;
    font-size: 2rem;
    font-weight: bold;
    margin: 0 0 2rem 0;
    color: #2c3e50;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .stat-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1.5rem;
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .stat-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
  }

  .stat-icon {
    flex-shrink: 0;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #3498db;
    color: white;
    border-radius: 50%;
  }

  .stat-content {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .stat-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: #2c3e50;
    line-height: 1.2;
  }

  .stat-label {
    font-size: 0.875rem;
    color: #7f8c8d;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .trip-stats {
      padding: 2rem 0;
    }

    .stats-title {
      font-size: 1.75rem;
      margin-bottom: 1.5rem;
    }

    .stats-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
      padding: 0 1rem;
    }

    .stat-item {
      padding: 1rem;
    }

    .stat-icon {
      width: 40px;
      height: 40px;
    }

    .stat-value {
      font-size: 1.25rem;
    }
  }

  @media (max-width: 480px) {
    .stats-grid {
      grid-template-columns: 1fr;
    }

    .stat-item {
      flex-direction: column;
      text-align: center;
      gap: 0.75rem;
    }

    .stat-content {
      align-items: center;
    }
  }
</style>