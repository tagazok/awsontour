---
interface StatItem {
  id: string;
  value: number;
  label: string;
  icon: string;
  unit?: string;
}

interface Props {
  stats: StatItem[];
}

const { stats } = Astro.props;

// Format numbers with proper units and separators
const formatNumber = (num: number): string => {
  return new Intl.NumberFormat('en-US').format(num);
};

// Format value with unit if provided
const formatValue = (value: number, unit?: string): string => {
  const formattedNumber = formatNumber(value);
  return unit ? `${formattedNumber} ${unit}` : formattedNumber;
};

// Filter out statistics with zero or undefined values
const visibleStats = stats.filter(stat => stat.value && stat.value > 0);
---

{visibleStats.length > 0 && (
  <section class="trip-stats">
    <h2 class="stats-title">Trip Statistics</h2>
    <div class="stats-grid">
      {visibleStats.map((stat) => (
        <div class="stat-item">
          <div class="stat-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <Fragment set:html={stat.icon} />
            </svg>
          </div>
          <div class="stat-content">
            <span class="stat-value">{formatValue(stat.value, stat.unit)}</span>
            <span class="stat-label">{stat.label}</span>
          </div>
        </div>
      ))}
    </div>
  </section>
)}

<style>
  .trip-stats {
    padding: 3rem 0;
  }

  .stats-title {
    text-align: center;
    font-size: 2rem;
    font-weight: bold;
    margin: 0 0 2rem 0;
    color: #2c3e50;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    padding: 1.5rem;
    /* background: white; */
    /* border-radius: 12px; */
    /* box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); */
    transition: transform 0.2s ease;
  }

  .stat-item:hover {
    transform: translateY(-2px);
    /* box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15); */
  }

  .stat-icon {
    flex-shrink: 0;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #9c27b0;
    color: white;
    border-radius: 50%;
  }

  .stat-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
  }

  .stat-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: #2c3e50;
    line-height: 1.2;
  }

  .stat-label {
    font-size: 0.875rem;
    color: #7f8c8d;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .trip-stats {
      padding: 2rem 0;
    }

    .stats-title {
      font-size: 1.75rem;
      margin-bottom: 1.5rem;
    }

    .stats-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
      padding: 0 1rem;
    }

    .stat-item {
      padding: 1rem;
    }

    .stat-icon {
      width: 40px;
      height: 40px;
    }

    .stat-value {
      font-size: 1.25rem;
    }
  }

  @media (max-width: 480px) {
    .stats-grid {
      grid-template-columns: 1fr;
    }

    .stat-item {
      flex-direction: column;
      text-align: center;
      gap: 0.75rem;
    }

    .stat-content {
      align-items: center;
    }
  }
</style>