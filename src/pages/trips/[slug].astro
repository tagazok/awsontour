---
import { getCollection, type CollectionEntry } from 'astro:content';
import TripLayout from '../../layouts/TripLayout.astro';
import TripHeader from '../../components/TripHeader.astro';
import TripStats from '../../components/TripStats.astro';
import TripMap from '../../components/TripMap.astro';
import TripGallery from '../../components/TripGallery.astro';
import ActivityCard from '../../components/ActivityCard.astro';
import PersonCard from '../../components/PersonCard.astro';

export async function getStaticPaths() {
  const trips = await getCollection('trips');
  
  return trips.map((trip) => ({
    params: { slug: trip.slug },
    props: { trip },
  }));
}

type Props = {
  trip: CollectionEntry<'trips'>;
};

const { trip } = Astro.props;

// Handle potential missing trip (this shouldn't happen with getStaticPaths, but good for type safety)
if (!trip) {
  return Astro.redirect('/404');
}

const { Content } = await trip.render();
const { data } = trip;

// Check if we should use side-by-side layout for stats and map
const visibleStats = data.stats.filter(stat => stat.value && stat.value > 0);
const shouldUseSideBySideLayout = visibleStats.length < 5;
---

<TripLayout 
  title={data.title} 
  description={data.description}
  image={data.headerImage}
  tripSlug={trip.slug}
>
  <!-- Trip Header Section -->
  <TripHeader 
    slot="header"
    title={data.title}
    description={data.description}
    headerImage={data.headerImage}
  />

  {shouldUseSideBySideLayout ? (
    <!-- Combined Stats and Map Section (side by side) -->
    <div slot="stats-map" class="stats-map-combined">
      <div class="stats-map-container">
        <div class="stats-column">
          <TripStats stats={data.stats} />
        </div>
        <div class="map-column">
          {data.route && data.route.coordinates && data.route.coordinates.length > 0 ? (
            <TripMap 
              route={data.route}
              title={`${data.title} Route`}
            />
          ) : (
            <div class="map-fallback">
              <div class="map-fallback-content">
                <h2>Trip Route</h2>
                <p>Route information not available for this trip.</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  ) : (
    <>
      <!-- Trip Stats Section (separate) -->
      <TripStats 
        slot="stats"
        stats={data.stats}
      />

      <!-- Map Section (separate) -->
      {data.route && data.route.coordinates && data.route.coordinates.length > 0 ? (
        <TripMap 
          slot="map"
          route={data.route}
          title={`${data.title} Route`}
        />
      ) : (
        <div slot="map" class="map-fallback">
          <div class="map-fallback-content">
            <h2>Trip Route</h2>
            <p>Route information not available for this trip.</p>
          </div>
        </div>
      )}
    </>
  )}

  <!-- Trip Gallery Section -->
  <TripGallery 
    slot="gallery"
    gallery={data.gallery}
    tripTitle={data.title}
  />

  <!-- Trip Activities Section -->
  <ActivityCard 
    slot="activities"
    activities={data.activities}
  />

  <!-- Trip Participants Section -->
  <PersonCard 
    slot="participants"
    participants={data.participants}
  />

  <!-- Additional Content (Markdown) -->
  <!-- <div class="trip-markdown-content">
    <h2>About This Trip</h2>
    <Content />
  </div> -->
</TripLayout>

<style>
  /* Combined Stats and Map Layout */
  .stats-map-combined {
    padding: 2rem 1rem;
    /* background-color: #ffffff; */
    max-width: 1200px;
    margin: 0 auto;
  }

  .stats-map-container {
    display: grid;
    grid-template-columns: 400px 1fr; /* Fixed width for stats, flexible for map */
    gap: 3rem;
    align-items: stretch;
    min-height: 500px;
  }

  .stats-column {
    display: flex;
    flex-direction: column;
    min-height: 500px; /* Match container height */
  }

  .stats-column :global(.trip-stats) {
    padding: 0;
    background: transparent;
    flex: 1; /* Fill available space */
    display: flex;
    flex-direction: column;
    justify-content: center; /* Center content vertically */
  }

  .stats-column :global(.stats-title) {
    text-align: left;
    margin-bottom: 2rem;
    flex-shrink: 0; /* Don't shrink the title */
  }

  .stats-column :global(.stats-grid) {
    padding: 0;
    gap: 1.5rem;
    flex: 1;
    display: grid;
    grid-template-columns: 1fr 1fr; /* Force 2x2 grid for compact display */
    align-content: center;
    max-width: 400px; /* Constrain width */
  }

  .map-column {
    display: flex;
    flex-direction: column;
    min-height: 500px; /* Match container height */
  }

  .map-column :global(.trip-map) {
    flex: 1; /* Fill available space */
    min-height: 500px; /* Match container height */
    height: 500px; /* Set explicit height */
  }

  /* Map Fallback Styles */
  .map-fallback {
    background: #f8f9fa;
    border: 2px dashed #dee2e6;
    border-radius: 12px;
    padding: 2rem;
    text-align: center;
    flex: 1; /* Fill available space in map column */
    min-height: 500px; /* Match container height */
    height: 500px; /* Set explicit height */
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0; /* Remove margin when in side-by-side layout */
  }

  .map-fallback-content h2 {
    font-size: 1.5rem;
    font-weight: 600;
    color: #495057;
    margin: 0 0 0.5rem 0;
  }

  .map-fallback-content > p {
    color: #6c757d;
    font-style: italic;
    margin: 0;
  }

  /* Markdown Content Styles */
  .trip-markdown-content {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 1rem;
    line-height: 1.7;
  }

  .trip-markdown-content h2 {
    font-size: 1.875rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0 0 1.5rem 0;
    text-align: center;
  }

  .trip-markdown-content :global(h1),
  .trip-markdown-content :global(h2),
  .trip-markdown-content :global(h3) {
    color: #1f2937;
    font-weight: 700;
    margin: 2rem 0 1rem 0;
  }

  .trip-markdown-content :global(h1) {
    font-size: 2rem;
  }

  .trip-markdown-content :global(h2) {
    font-size: 1.5rem;
  }

  .trip-markdown-content :global(h3) {
    font-size: 1.25rem;
  }

  .trip-markdown-content :global(p) {
    margin: 1rem 0;
    color: #374151;
  }

  .trip-markdown-content :global(ul),
  .trip-markdown-content :global(ol) {
    margin: 1rem 0;
    padding-left: 1.5rem;
    color: #374151;
  }

  .trip-markdown-content :global(li) {
    margin: 0.5rem 0;
  }

  .trip-markdown-content :global(blockquote) {
    border-left: 4px solid #3b82f6;
    padding-left: 1rem;
    margin: 1.5rem 0;
    font-style: italic;
    color: #6b7280;
  }

  .trip-markdown-content :global(code) {
    background: #f3f4f6;
    padding: 0.125rem 0.25rem;
    border-radius: 4px;
    font-size: 0.875rem;
    color: #374151;
  }

  .trip-markdown-content :global(pre) {
    background: #1f2937;
    color: #f9fafb;
    padding: 1rem;
    border-radius: 8px;
    overflow-x: auto;
    margin: 1.5rem 0;
  }

  .trip-markdown-content :global(pre code) {
    background: none;
    padding: 0;
    color: inherit;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .stats-map-container {
      grid-template-columns: 350px 1fr; /* Slightly smaller stats column on tablet */
      gap: 2rem;
      min-height: auto;
    }

    .stats-column :global(.stats-grid) {
      max-width: 350px;
    }
  }

  @media (max-width: 900px) {
    .stats-map-container {
      grid-template-columns: 1fr; /* Stack on smaller tablets */
      gap: 2rem;
      min-height: auto;
    }

    .stats-column :global(.stats-grid) {
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); /* Revert to flexible grid */
      max-width: none;
    }

    .stats-column :global(.stats-title) {
      text-align: center; /* Center title when stacked */
    }

    .stats-column {
      min-height: auto; /* Remove fixed height on tablet */
    }

    .stats-column :global(.trip-stats) {
      justify-content: flex-start; /* Align to top on tablet */
    }

    .stats-column :global(.stats-grid) {
      align-content: start; /* Align to top on tablet */
    }

    .map-column {
      min-height: 350px;
    }

    .map-column :global(.trip-map) {
      min-height: 350px;
      height: 350px;
    }

    .map-fallback {
      min-height: 350px;
      height: 350px;
    }
  }

  @media (max-width: 768px) {
    .stats-map-combined {
      padding: 1.5rem 0.75rem;
    }

    .stats-map-container {
      gap: 1.5rem;
    }

    .map-column {
      min-height: 300px;
    }

    .map-column :global(.trip-map) {
      min-height: 300px;
      height: 300px;
    }

    .map-fallback {
      padding: 1.5rem 1rem;
      min-height: 300px;
      height: 300px;
    }

    .map-fallback-content h2 {
      font-size: 1.25rem;
    }

    .trip-markdown-content {
      padding: 1.5rem 0.75rem;
    }

    .trip-markdown-content h2 {
      font-size: 1.5rem;
    }
  }

  @media (max-width: 480px) {
    .stats-map-combined {
      padding: 1rem 0.5rem;
    }

    .stats-map-container {
      gap: 1rem;
    }

    .stats-column :global(.stats-title) {
      font-size: 1.5rem;
      text-align: center;
      margin-bottom: 1.5rem;
    }

    .stats-column :global(.stats-grid) {
      gap: 1rem;
    }

    .map-column {
      min-height: 250px;
    }

    .map-column :global(.trip-map) {
      min-height: 250px;
      height: 250px;
    }

    .map-fallback {
      padding: 1rem 0.75rem;
      min-height: 250px;
      height: 250px;
    }

    .trip-markdown-content {
      padding: 1rem 0.5rem;
    }

    .trip-markdown-content h2 {
      font-size: 1.375rem;
    }
  }
</style>