import { describe, it, expect, beforeEach, vi } from 'vitest';
import { mockTrips } from '../mocks/tripData';
import type { CollectionEntry } from 'astro:content';

// Mock Astro's content collection functions
const mockGetCollection = vi.fn();
const mockGetStaticPaths = vi.fn();

// Mock the trip page module
vi.mock('astro:content', () => ({
  getCollection: mockGetCollection,
  type: vi.fn()
}));

// Mock Astro global
const mockAstro = {
  props: {} as any,
  redirect: vi.fn()
};

// Helper function to simulate the getStaticPaths function from [slug].astro
async function simulateGetStaticPaths() {
  const trips = await mockGetCollection('trips');
  
  return trips.map((trip: CollectionEntry<'trips'>) => ({
    params: { slug: trip.slug },
    props: { trip },
  }));
}

// Helper function to simulate trip page rendering
function simulateTripPageRender(trip: CollectionEntry<'trips'>) {
  const { data } = trip;
  
  // Simulate the HTML structure that would be generated by the Astro page
  return `
    <html>
      <head>
        <title>${data.title}</title>
        <meta name="description" content="${data.description}" />
      </head>
      <body>
        <main class="trip-page" data-trip-slug="${trip.slug}">
          <!-- Trip Header -->
          <section class="trip-header">
            <div class="header-image-container">
              <img src="${data.headerImage}" alt="Header image for ${data.title}" class="header-image" />
            </div>
            <div class="header-content">
              <h1 class="trip-title">${data.title}</h1>
              <p class="trip-description">${data.description}</p>
            </div>
          </section>

          <!-- Trip Stats -->
          <section class="trip-stats">
            <h2>Trip Statistics</h2>
            <div class="stats-grid">
              <div class="stat-item" data-stat="kilometers">
                <span class="stat-value">${data.stats.kilometers}</span>
                <span class="stat-label">km</span>
              </div>
              <div class="stat-item" data-stat="activities">
                <span class="stat-value">${data.stats.activities}</span>
                <span class="stat-label">activities</span>
              </div>
              <div class="stat-item" data-stat="people">
                <span class="stat-value">${data.stats.peopleMet}</span>
                <span class="stat-label">people met</span>
              </div>
              <div class="stat-item" data-stat="cities">
                <span class="stat-value">${data.stats.cities}</span>
                <span class="stat-label">cities</span>
              </div>
              <div class="stat-item" data-stat="days">
                <span class="stat-value">${data.stats.days}</span>
                <span class="stat-label">days</span>
              </div>
            </div>
          </section>

          <!-- Map Section -->
          <section class="trip-map">
            <div class="map-placeholder">
              <h2>Trip Route</h2>
              <div class="route-info">
                <div class="coordinates-list">
                  ${data.route.coordinates.map((coord, index) => 
                    `<div class="coordinate-item" data-index="${index}">
                      Point ${index + 1}: ${coord[1].toFixed(4)}, ${coord[0].toFixed(4)}
                    </div>`
                  ).join('')}
                </div>
                <div class="waypoints-list">
                  ${data.route.waypoints.map((waypoint, index) => 
                    `<div class="waypoint-item" data-index="${index}">
                      <strong>${waypoint.name}</strong>: ${waypoint.coordinates[1].toFixed(4)}, ${waypoint.coordinates[0].toFixed(4)}
                    </div>`
                  ).join('')}
                </div>
              </div>
            </div>
          </section>

          <!-- Gallery -->
          <section class="trip-gallery">
            <h2>Photo Gallery</h2>
            <div class="gallery-grid">
              ${data.gallery.map((item, index) => 
                `<div class="gallery-item" data-index="${index}">
                  <img src="${item.image}" alt="${item.title || `${data.title} photo ${index + 1}`}" class="gallery-image" />
                  ${item.title ? `<h3 class="image-title">${item.title}</h3>` : ''}
                  ${item.description ? `<p class="image-description">${item.description}</p>` : ''}
                </div>`
              ).join('')}
            </div>
          </section>

          <!-- Activities -->
          <section class="trip-activities">
            <h2>Activities</h2>
            <div class="activities-grid">
              ${data.activities.map((activity, index) => 
                `<div class="activity-card ${activity.isPublic ? 'public' : 'private'}" data-index="${index}">
                  <h3 class="activity-name">${activity.name}</h3>
                  <p class="activity-description">${activity.description}</p>
                  ${activity.date ? `<time class="activity-date">${activity.date.toLocaleDateString()}</time>` : ''}
                  <div class="activity-badge ${activity.isPublic ? 'public-badge' : 'private-badge'}">
                    ${activity.isPublic ? 'Public Event' : 'Private'}
                  </div>
                  ${activity.isPublic && activity.registrationUrl ? 
                    `<a href="${activity.registrationUrl}" class="registration-button" target="_blank" rel="noopener noreferrer">Register Now</a>` :
                    activity.isPublic ? '<span class="no-registration">No registration required</span>' : ''
                  }
                </div>`
              ).join('')}
            </div>
          </section>

          <!-- Participants -->
          <section class="trip-participants">
            <h2>Travel Companions</h2>
            <div class="participants-grid">
              ${data.participants.map((participant, index) => 
                `<div class="person-card" data-index="${index}">
                  <div class="person-avatar">
                    ${participant.photo ? 
                      `<img src="${participant.photo}" alt="Photo of ${participant.name}" class="avatar-image" />` :
                      `<div class="avatar-fallback">${participant.name.split(' ').map(n => n[0]).join('').toUpperCase()}</div>`
                    }
                  </div>
                  <h3 class="person-name">${participant.name}</h3>
                  ${participant.role ? `<p class="person-role">${participant.role}</p>` : ''}
                </div>`
              ).join('')}
            </div>
          </section>

          <!-- Markdown Content -->
          <div class="trip-markdown-content">
            <h2>About This Trip</h2>
            <div class="markdown-body">
              <!-- Simulated markdown content -->
              <p>This is the rendered markdown content for ${data.title}.</p>
            </div>
          </div>
        </main>
      </body>
    </html>
  `;
}

describe('Trip Pages Integration Tests', () => {
  beforeEach(() => {
    // Reset mocks
    vi.clearAllMocks();
    document.body.innerHTML = '';
    
    // Setup default mock behavior
    mockGetCollection.mockResolvedValue(mockTrips);
    mockAstro.redirect.mockClear();
  });

  describe('Dynamic Route Generation', () => {
    it('should generate static paths for all trips', async () => {
      const staticPaths = await simulateGetStaticPaths();

      expect(staticPaths).toHaveLength(mockTrips.length);
      
      // Verify each trip generates a path
      staticPaths.forEach((path, index) => {
        expect(path.params.slug).toBe(mockTrips[index].slug);
        expect(path.props.trip).toBe(mockTrips[index]);
      });
    });

    it('should generate correct slug parameters', async () => {
      const staticPaths = await simulateGetStaticPaths();
      const slugs = staticPaths.map(path => path.params.slug);

      expect(slugs).toContain('current-adventure');
      expect(slugs).toContain('completed-trip');
      expect(slugs).toContain('planned-trip');
    });

    it('should pass trip data as props', async () => {
      const staticPaths = await simulateGetStaticPaths();
      
      staticPaths.forEach((path, index) => {
        const trip = path.props.trip;
        expect(trip).toBeDefined();
        expect(trip.id).toBe(mockTrips[index].id);
        expect(trip.slug).toBe(mockTrips[index].slug);
        expect(trip.data).toBeDefined();
        expect(trip.data.title).toBe(mockTrips[index].data.title);
      });
    });

    it('should handle empty trips collection', async () => {
      mockGetCollection.mockResolvedValue([]);
      
      const staticPaths = await simulateGetStaticPaths();
      expect(staticPaths).toHaveLength(0);
    });

    it('should handle trips with special characters in slugs', async () => {
      const specialTrips = [
        {
          ...mockTrips[0],
          slug: 'trip-with-special-chars-123',
          id: 'trip-with-special-chars-123'
        }
      ];
      
      mockGetCollection.mockResolvedValue(specialTrips);
      
      const staticPaths = await simulateGetStaticPaths();
      expect(staticPaths[0].params.slug).toBe('trip-with-special-chars-123');
    });
  });

  describe('Component Integration and Data Passing', () => {
    it('should render trip page with all components integrated', () => {
      const trip = mockTrips[0]; // Current adventure
      const html = simulateTripPageRender(trip);
      
      document.body.innerHTML = html;

      // Verify main page structure
      expect(document.querySelector('.trip-page')).toBeTruthy();
      expect(document.querySelector('.trip-page')?.getAttribute('data-trip-slug')).toBe(trip.slug);

      // Verify all major sections are present
      expect(document.querySelector('.trip-header')).toBeTruthy();
      expect(document.querySelector('.trip-stats')).toBeTruthy();
      expect(document.querySelector('.trip-map')).toBeTruthy();
      expect(document.querySelector('.trip-gallery')).toBeTruthy();
      expect(document.querySelector('.trip-activities')).toBeTruthy();
      expect(document.querySelector('.trip-participants')).toBeTruthy();
      expect(document.querySelector('.trip-markdown-content')).toBeTruthy();
    });

    it('should pass correct data to TripHeader component', () => {
      const trip = mockTrips[0];
      const html = simulateTripPageRender(trip);
      
      document.body.innerHTML = html;

      const title = document.querySelector('.trip-title');
      const description = document.querySelector('.trip-description');
      const headerImage = document.querySelector('.header-image') as HTMLImageElement;

      expect(title?.textContent).toBe(trip.data.title);
      expect(description?.textContent).toBe(trip.data.description);
      expect(headerImage?.src).toContain(trip.data.headerImage);
      expect(headerImage?.alt).toBe(`Header image for ${trip.data.title}`);
    });

    it('should pass correct data to TripStats component', () => {
      const trip = mockTrips[0];
      const html = simulateTripPageRender(trip);
      
      document.body.innerHTML = html;

      const statItems = document.querySelectorAll('.stat-item');
      expect(statItems).toHaveLength(5);

      // Check specific stats
      const kmStat = document.querySelector('[data-stat="kilometers"] .stat-value');
      const activitiesStat = document.querySelector('[data-stat="activities"] .stat-value');
      const peopleStat = document.querySelector('[data-stat="people"] .stat-value');
      const citiesStat = document.querySelector('[data-stat="cities"] .stat-value');
      const daysStat = document.querySelector('[data-stat="days"] .stat-value');

      expect(kmStat?.textContent).toBe(trip.data.stats.kilometers.toString());
      expect(activitiesStat?.textContent).toBe(trip.data.stats.activities.toString());
      expect(peopleStat?.textContent).toBe(trip.data.stats.peopleMet.toString());
      expect(citiesStat?.textContent).toBe(trip.data.stats.cities.toString());
      expect(daysStat?.textContent).toBe(trip.data.stats.days.toString());
    });

    it('should pass correct data to map section', () => {
      const trip = mockTrips[0];
      const html = simulateTripPageRender(trip);
      
      document.body.innerHTML = html;

      // Check coordinates are rendered
      const coordinateItems = document.querySelectorAll('.coordinate-item');
      expect(coordinateItems).toHaveLength(trip.data.route.coordinates.length);

      // Check waypoints are rendered
      const waypointItems = document.querySelectorAll('.waypoint-item');
      expect(waypointItems).toHaveLength(trip.data.route.waypoints.length);

      // Verify first waypoint data
      const firstWaypoint = waypointItems[0];
      expect(firstWaypoint.textContent).toContain(trip.data.route.waypoints[0].name);
    });

    it('should pass correct data to TripGallery component', () => {
      const trip = mockTrips[0];
      const html = simulateTripPageRender(trip);
      
      document.body.innerHTML = html;

      const galleryItems = document.querySelectorAll('.gallery-item');
      expect(galleryItems).toHaveLength(trip.data.gallery.length);

      // Check first gallery item
      if (trip.data.gallery.length > 0) {
        const firstItem = galleryItems[0];
        const image = firstItem.querySelector('.gallery-image') as HTMLImageElement;
        const title = firstItem.querySelector('.image-title');
        const description = firstItem.querySelector('.image-description');

        expect(image.src).toContain(trip.data.gallery[0].image);
        if (trip.data.gallery[0].title) {
          expect(title?.textContent).toBe(trip.data.gallery[0].title);
        }
        if (trip.data.gallery[0].description) {
          expect(description?.textContent).toBe(trip.data.gallery[0].description);
        }
      }
    });

    it('should pass correct data to ActivityCard component', () => {
      const trip = mockTrips[0];
      const html = simulateTripPageRender(trip);
      
      document.body.innerHTML = html;

      const activityCards = document.querySelectorAll('.activity-card');
      expect(activityCards).toHaveLength(trip.data.activities.length);

      // Check first activity
      if (trip.data.activities.length > 0) {
        const firstActivity = activityCards[0];
        const name = firstActivity.querySelector('.activity-name');
        const description = firstActivity.querySelector('.activity-description');
        const badge = firstActivity.querySelector('.activity-badge');

        expect(name?.textContent).toBe(trip.data.activities[0].name);
        expect(description?.textContent).toBe(trip.data.activities[0].description);
        
        if (trip.data.activities[0].isPublic) {
          expect(firstActivity.classList.contains('public')).toBe(true);
          expect(badge?.textContent?.trim()).toBe('Public Event');
        } else {
          expect(firstActivity.classList.contains('private')).toBe(true);
          expect(badge?.textContent?.trim()).toBe('Private');
        }
      }
    });

    it('should pass correct data to PersonCard component', () => {
      const trip = mockTrips[0];
      const html = simulateTripPageRender(trip);
      
      document.body.innerHTML = html;

      const personCards = document.querySelectorAll('.person-card');
      expect(personCards).toHaveLength(trip.data.participants.length);

      // Check first participant
      if (trip.data.participants.length > 0) {
        const firstPerson = personCards[0];
        const name = firstPerson.querySelector('.person-name');
        const role = firstPerson.querySelector('.person-role');
        const avatar = firstPerson.querySelector('.avatar-image, .avatar-fallback');

        expect(name?.textContent).toBe(trip.data.participants[0].name);
        
        if (trip.data.participants[0].role) {
          expect(role?.textContent).toBe(trip.data.participants[0].role);
        }
        
        expect(avatar).toBeTruthy();
      }
    });

    it('should handle trips with minimal data', () => {
      const minimalTrip: CollectionEntry<'trips'> = {
        id: 'minimal-trip',
        slug: 'minimal-trip',
        body: '',
        collection: 'trips',
        data: {
          title: 'Minimal Trip',
          description: 'Basic description',
          startDate: new Date('2024-01-01'),
          endDate: new Date('2024-01-02'),
          status: 'planned' as const,
          headerImage: '/images/minimal.jpg',
          stats: {
            kilometers: 0,
            activities: 0,
            peopleMet: 0,
            cities: 0,
            days: 1
          },
          route: {
            coordinates: [],
            waypoints: []
          },
          gallery: [],
          activities: [],
          participants: []
        }
      };

      const html = simulateTripPageRender(minimalTrip);
      document.body.innerHTML = html;

      // Should render without errors even with empty arrays
      expect(document.querySelector('.trip-page')).toBeTruthy();
      expect(document.querySelector('.trip-title')?.textContent).toBe('Minimal Trip');
      
      // Empty sections should still be present but empty
      expect(document.querySelectorAll('.gallery-item')).toHaveLength(0);
      expect(document.querySelectorAll('.activity-card')).toHaveLength(0);
      expect(document.querySelectorAll('.person-card')).toHaveLength(0);
      expect(document.querySelectorAll('.coordinate-item')).toHaveLength(0);
      expect(document.querySelectorAll('.waypoint-item')).toHaveLength(0);
    });

    it('should handle trips with complex data structures', () => {
      const complexTrip = mockTrips[0]; // Use the current adventure which has full data
      const html = simulateTripPageRender(complexTrip);
      
      document.body.innerHTML = html;

      // Verify complex data is handled correctly
      expect(document.querySelector('.trip-page')).toBeTruthy();
      
      // Check that all data arrays are rendered
      expect(document.querySelectorAll('.gallery-item').length).toBeGreaterThan(0);
      expect(document.querySelectorAll('.activity-card').length).toBeGreaterThan(0);
      expect(document.querySelectorAll('.person-card').length).toBeGreaterThan(0);
      expect(document.querySelectorAll('.coordinate-item').length).toBeGreaterThan(0);
      expect(document.querySelectorAll('.waypoint-item').length).toBeGreaterThan(0);

      // Verify registration buttons for public activities
      const publicActivities = complexTrip.data.activities.filter(a => a.isPublic && a.registrationUrl);
      const registrationButtons = document.querySelectorAll('.registration-button');
      expect(registrationButtons).toHaveLength(publicActivities.length);
    });
  });

  describe('Error Handling for Invalid Trip Slugs', () => {
    it('should handle missing trip gracefully', () => {
      // Simulate what happens when trip is undefined (shouldn't happen with getStaticPaths but good for type safety)
      const trip = undefined;
      
      // In the actual Astro page, this would trigger a redirect
      if (!trip) {
        mockAstro.redirect('/404');
      }

      expect(mockAstro.redirect).toHaveBeenCalledWith('/404');
    });

    it('should handle null trip data', () => {
      const nullTrip = null;
      
      if (!nullTrip) {
        mockAstro.redirect('/404');
      }

      expect(mockAstro.redirect).toHaveBeenCalledWith('/404');
    });

    it('should validate trip data structure before rendering', () => {
      // Test with malformed trip data
      const malformedTrip = {
        id: 'malformed',
        slug: 'malformed',
        body: '',
        collection: 'trips',
        data: {
          title: 'Malformed Trip',
          // Missing required fields
        }
      } as any;

      // In a real scenario, this would be caught by Zod validation
      // Here we simulate the validation check
      const hasRequiredFields = malformedTrip.data.title && 
                               malformedTrip.data.description && 
                               malformedTrip.data.headerImage &&
                               malformedTrip.data.stats;

      if (!hasRequiredFields) {
        mockAstro.redirect('/404');
      }

      expect(mockAstro.redirect).toHaveBeenCalledWith('/404');
    });

    it('should handle trips with invalid image paths gracefully', () => {
      const tripWithInvalidImages = {
        ...mockTrips[0],
        data: {
          ...mockTrips[0].data,
          headerImage: '', // Invalid empty image path
          gallery: [
            { image: '', title: 'Invalid Image' }, // Invalid empty image path
            { image: '/valid/path.jpg', title: 'Valid Image' }
          ],
          participants: [
            { name: 'Person 1', photo: '' }, // Invalid empty photo path
            { name: 'Person 2', photo: '/valid/photo.jpg' }
          ]
        }
      };

      const html = simulateTripPageRender(tripWithInvalidImages);
      document.body.innerHTML = html;

      // Should render without crashing
      expect(document.querySelector('.trip-page')).toBeTruthy();
      
      // Images with empty src should still be present (browser handles gracefully)
      const headerImage = document.querySelector('.header-image') as HTMLImageElement;
      // Browser may resolve empty src to current page URL, so check for empty or current URL
      expect(headerImage.getAttribute('src')).toBe(''); // Check the actual attribute, not resolved URL
      
      const galleryImages = document.querySelectorAll('.gallery-image');
      expect(galleryImages).toHaveLength(2); // Both images rendered
    });

    it('should handle trips with invalid date formats', () => {
      const tripWithInvalidDates = {
        ...mockTrips[0],
        data: {
          ...mockTrips[0].data,
          activities: [
            {
              name: 'Activity with invalid date',
              description: 'Test activity',
              date: 'invalid-date' as any, // Invalid date
              isPublic: true
            }
          ]
        }
      };

      // In real Astro, Zod would catch this during build
      // Here we simulate handling the error
      try {
        const html = simulateTripPageRender(tripWithInvalidDates);
        document.body.innerHTML = html;
        
        // If it renders, the date should be handled gracefully
        const activityDate = document.querySelector('.activity-date');
        // Invalid dates would typically not render or show as "Invalid Date"
        expect(activityDate?.textContent).toContain('Invalid Date');
      } catch (error) {
        // Expected to throw due to invalid date
        expect(error).toBeDefined();
      }
    });

    it('should handle trips with missing required nested data', () => {
      const tripWithMissingNestedData = {
        ...mockTrips[0],
        data: {
          ...mockTrips[0].data,
          stats: undefined as any, // Missing required stats
          route: undefined as any  // Missing required route
        }
      };

      // This would be caught by Zod validation in real scenario
      const hasValidNestedData = tripWithMissingNestedData.data.stats && 
                                tripWithMissingNestedData.data.route;

      if (!hasValidNestedData) {
        mockAstro.redirect('/404');
      }

      expect(mockAstro.redirect).toHaveBeenCalledWith('/404');
    });

    it('should handle network errors during content loading', async () => {
      // Simulate network error when loading trips
      mockGetCollection.mockRejectedValue(new Error('Network error'));

      try {
        await simulateGetStaticPaths();
      } catch (error) {
        expect(error).toBeInstanceOf(Error);
        expect((error as Error).message).toBe('Network error');
      }
    });

    it('should handle corrupted trip data gracefully', () => {
      const corruptedTrip = {
        ...mockTrips[0],
        data: {
          ...mockTrips[0].data,
          gallery: 'not-an-array' as any, // Corrupted data type
          activities: null as any,        // Null instead of array
          participants: undefined as any  // Undefined instead of array
        }
      };

      // In real scenario, this would be caught by type checking and Zod validation
      const isValidData = Array.isArray(corruptedTrip.data.gallery) &&
                         Array.isArray(corruptedTrip.data.activities) &&
                         Array.isArray(corruptedTrip.data.participants);

      if (!isValidData) {
        mockAstro.redirect('/404');
      }

      expect(mockAstro.redirect).toHaveBeenCalledWith('/404');
    });
  });

  describe('SEO and Meta Data Integration', () => {
    it('should set correct page title and meta description', () => {
      const trip = mockTrips[0];
      const html = simulateTripPageRender(trip);
      
      document.documentElement.innerHTML = html;

      const title = document.querySelector('title');
      const metaDescription = document.querySelector('meta[name="description"]');

      expect(title?.textContent).toBe(trip.data.title);
      expect(metaDescription?.getAttribute('content')).toBe(trip.data.description);
    });

    it('should handle special characters in meta data', () => {
      const tripWithSpecialChars = {
        ...mockTrips[0],
        data: {
          ...mockTrips[0].data,
          title: 'Trip with "Quotes" & Symbols',
          description: 'Description with <tags> and & symbols'
        }
      };

      const html = simulateTripPageRender(tripWithSpecialChars);
      document.documentElement.innerHTML = html;

      const title = document.querySelector('title');
      const metaDescription = document.querySelector('meta[name="description"]');

      expect(title?.textContent).toBe('Trip with "Quotes" & Symbols');
      expect(metaDescription?.getAttribute('content')).toBe('Description with <tags> and & symbols');
    });
  });

  describe('Performance and Loading Behavior', () => {
    it('should handle large datasets efficiently', () => {
      // Create a trip with large amounts of data
      const largeTrip = {
        ...mockTrips[0],
        data: {
          ...mockTrips[0].data,
          gallery: Array.from({ length: 50 }, (_, i) => ({
            image: `/images/gallery${i}.jpg`,
            title: `Image ${i + 1}`,
            description: `Description for image ${i + 1}`
          })),
          activities: Array.from({ length: 20 }, (_, i) => ({
            name: `Activity ${i + 1}`,
            description: `Description for activity ${i + 1}`,
            isPublic: i % 2 === 0,
            registrationUrl: i % 2 === 0 ? `https://example.com/activity${i}` : undefined
          })),
          participants: Array.from({ length: 15 }, (_, i) => ({
            name: `Person ${i + 1}`,
            photo: i % 3 === 0 ? `/images/person${i}.jpg` : undefined,
            role: i % 2 === 0 ? `Role ${i + 1}` : undefined
          })),
          route: {
            coordinates: Array.from({ length: 100 }, (_, i) => [i, i + 1] as [number, number]),
            waypoints: Array.from({ length: 10 }, (_, i) => ({
              name: `Waypoint ${i + 1}`,
              coordinates: [i, i + 1] as [number, number]
            }))
          }
        }
      };

      const startTime = performance.now();
      const html = simulateTripPageRender(largeTrip);
      document.body.innerHTML = html;
      const endTime = performance.now();

      // Should render within reasonable time (less than 100ms for this test)
      expect(endTime - startTime).toBeLessThan(100);

      // Verify all elements are rendered
      expect(document.querySelectorAll('.gallery-item')).toHaveLength(50);
      expect(document.querySelectorAll('.activity-card')).toHaveLength(20);
      expect(document.querySelectorAll('.person-card')).toHaveLength(15);
      expect(document.querySelectorAll('.coordinate-item')).toHaveLength(100);
      expect(document.querySelectorAll('.waypoint-item')).toHaveLength(10);
    });

    it('should maintain consistent rendering across different trip types', () => {
      // Test all mock trips to ensure consistent rendering
      mockTrips.forEach((trip, index) => {
        const html = simulateTripPageRender(trip);
        document.body.innerHTML = html;

        // Each trip should have the same basic structure
        expect(document.querySelector('.trip-page')).toBeTruthy();
        expect(document.querySelector('.trip-header')).toBeTruthy();
        expect(document.querySelector('.trip-stats')).toBeTruthy();
        expect(document.querySelector('.trip-map')).toBeTruthy();
        expect(document.querySelector('.trip-gallery')).toBeTruthy();
        expect(document.querySelector('.trip-activities')).toBeTruthy();
        expect(document.querySelector('.trip-participants')).toBeTruthy();
        expect(document.querySelector('.trip-markdown-content')).toBeTruthy();

        // Trip-specific data should be correct
        expect(document.querySelector('.trip-title')?.textContent).toBe(trip.data.title);
        expect(document.querySelector('.trip-page')?.getAttribute('data-trip-slug')).toBe(trip.slug);
      });
    });
  });
});